
#include <stdlib.h>
#include <stdio.h>
#include <iostream>


#include "NetworkManager.h"
#include "Type.h"

#include "Encoder.h"
#include "Job.h"


int __cdecl main(int argc, char **argv) 
{
	
			

	NetworkManager netManager;
	
	
	WSADATA wsaData;

    //char *sendbuf = "this is a test";
    //char recvbuf[DEFAULT_BUFLEN];
    int iResult;
    //int recvbuflen = DEFAULT_BUFLEN;

	std::cout << "SIZE OF ENCODER HEADER: " << sizeof(EncoderHeader) << std::endl;

    // Initialize Winsock
    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);
    if (iResult != 0) {
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }
	
	//***************** EXAMPLE SEND ************************//
	
	char* data = "hello from a node!";
	char* dllName = "example_dll.dll";

	netManager.connectToNode("nodeA", "localhost", DEFAULT_PORT);

	Buffer test_job;
	
	JobInfo jobData;
	jobData.jobName[0] = 'h';
	jobData.jobName[1] = 'e';
	jobData.jobName[2] = 'l';
	jobData.jobName[3] = 'l';
	jobData.jobName[4] = 'o';
	jobData.jobName[5] = '\0';
	
	Encoder encoder;

	std::cout << "Payload frontend size: " << (int)strlen(dllName) << std::endl;

	encoder.run("example_dll.dll",                   0, RESOURCE_TYPE_CODE,     test_job);
	encoder.run((char*)&jobData, sizeof(JobInfo),    0, RESOURCE_TYPE_JOB,      test_job);
	encoder.run(data,     (int)strlen(data),         0, RESOURCE_TYPE_DATA,     test_job);
	
	std::cout << "Pre sent buff size: " << test_job.getSize() << std::endl;

	netManager.write("nodeA", test_job);
	
	int in = 0;
	
	std::cin >> in;

	//*******************************************************//
	

	
    // Receive until the peer closes the connection
   // do {

       // iResult = recv(ConnectSocket, recvbuf, recvbuflen, 0);
      //  if ( iResult > 0 )
      //      printf("Bytes received: %d\n", iResult);
     //   else if ( iResult == 0 )
     //       printf("Connection closed\n");
    //    else
    //        printf("recv failed with error: %d\n", WSAGetLastError());

    //} while( iResult > 0 );

    // cleanup
    //closesocket(ConnectSocket);
    WSACleanup();

    return 0;
}